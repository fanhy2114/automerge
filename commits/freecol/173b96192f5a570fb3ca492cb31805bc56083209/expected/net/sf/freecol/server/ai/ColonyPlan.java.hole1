/**
     * Equips a unit for a role.
     *
     * @param unit The <code>Unit</code> to equip if possible.
     * @param role The <code>Role</code> for the unit to take.
     * @param colony The <code>Colony</code> storing the equipment.
     * @return True if the unit was equipped.
     */
public static boolean equipUnit(Unit unit, Role role, Colony colony) {
  if (!unit.isPerson()) {
    return false;
  }
  final Specification spec = colony.getSpecification();
  List<EquipmentType> roleEq = unit.getRoleEquipment(role);
  TypeCountMap<EquipmentType> change = new TypeCountMap<EquipmentType>();
  for (EquipmentType et : spec.getEquipmentTypeList()) {
    int oldCount = unit.getEquipmentCount(et);
    int newCount = (roleEq.contains(et)) ? 1 : 0;
    if (newCount > oldCount && !colony.canBuildEquipment(et)) {
      return false;
    }
    if (newCount != oldCount) {
      change.incrementCount(et, newCount - oldCount);
    }
  }
  for (Entry<EquipmentType, Integer> entry : change.getValues().entrySet()) {
    EquipmentType et = entry.getKey();
    int count = entry.getValue().intValue();
    if (count < 0) {
      unit.changeEquipment(et, count);
      colony.addEquipmentGoods(et, -count);
    }
  }
  for (Entry<EquipmentType, Integer> entry : change.getValues().entrySet()) {
    EquipmentType et = entry.getKey();
    int count = entry.getValue().intValue();
    if (count > 0) {
      unit.changeEquipment(et, count);
      colony.addEquipmentGoods(et, -count);
    }
  }
  unit.setRole(role);
  return true;
} 

